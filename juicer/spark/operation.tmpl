# -*- coding: utf-8 -*-
#!/usr/bin/env python

#
# Auto-generated Spark code from Lemonade Workflow
# (c) Speed Labs - Departamento de Ciência da Computação
#     Universidade Federal de Minas Gerais
# More information about Lemonade to be provided
#
import string
import unicodedata

from pyspark.ml import Pipeline
from pyspark.ml.classification import *
from pyspark.ml.clustering import *
from pyspark.ml.evaluation import *
from pyspark.ml.feature import *
from pyspark.ml.tuning import *
from pyspark.sql import SparkSession
from pyspark.sql.window import Window
from pyspark.sql.functions import *
from pyspark.sql.types import *


# Global utilities functions definitions
strip_accents = udf(
    lambda text: ''.join(c for c in unicodedata.normalize('NFD', text)
        if unicodedata.category(c) != 'Mn'), StringType())
strip_punctuation = udf(lambda text:
                        text.translate(
                            dict((ord(char), None)
                                for char in string.punctuation)),
                        StringType())

def juicer_debug(name, variable, df):
    """ Debug code """
    print '#' * 20
    print '|| {} ||'.format(name)
    print '== {} =='.format(variable)
    df.show()
    schema = df.schema
    for attr in schema:
        print attr.name, attr.dataType, attr.nullable, attr.metadata

{%- for instance in instances %}
{%- if instance.has_code %}

def {{instance.parameters.task.operation.slug.replace('-', '_')}}_generate_{{instance.get_output_names('_')}}(spark_session
        {%- if instance.get_inputs_names %}, {{instance.get_inputs_names}}{% endif %}):
    {%- if instance.parameters.task.forms.comment %}
    """
    {{instance.parameters.task.forms.comment.value.replace('"', '')}}
    """
    {%- endif %}
    {{instance.generate_code() | indent(width=4, indentfirst=False)}}

    {%- set out = instance.get_data_out_names('|') %}
    {%- if out %}
    {%- for variable in out.split('|')%}
    juicer_debug('{{instance.__class__}}', '{{variable}}', {{variable}})
    {%- endfor %}
    {%- endif %}
    return {{instance.get_output_names()}}

{%- endif %}
{% endfor %}
def main():
    app_name = u'## {{workflow_name}} ##'
    spark_session = SparkSession.builder\
                        .appName(app_name)\
                        .getOrCreate()
    spark_session.sparkContext.addPyFile('/tmp/dist.zip')
    {%- for instance in instances %}
    {%- if instance.has_code %}
    {{instance.get_output_names(", ")}} = {{instance.parameters.task.operation.slug.replace('-', '_')}}_generate_{{instance.get_output_names('_')}}(spark_session
        {%- if instance.get_inputs_names %}, {{instance.get_inputs_names}}{% endif %})
    {%- endif %}
    {%- endfor %}

    return {
        {%- for instance in instances %}
        {%- if instance.has_code %}
        '{{instance.parameters.task.id}}': (
        {%- for variable in instance.get_output_names(', ').split('|') -%}
        {{variable}},
        {%- endfor -%}
        ),
        {%- endif %}
        {%- endfor %}
    }
