# -*- coding: utf-8 -*-
#!/usr/bin/env python
"""
Auto-generated Spark code from Lemonade Workflow
(c) Speed Labs - Departamento de Ciência da Computação
    Universidade Federal de Minas Gerais
More information about Lemonade to be provided
"""
import json
import os
import string
import sys
import time
import unicodedata

from timeit import default_timer as timer

from pyspark.ml import classification, evaluation, feature, tuning, clustering
from pyspark.sql import functions, types

from pyspark.ml import Pipeline
# from pyspark.ml.classification import *
# from pyspark.ml.clustering import *
# from pyspark.ml.evaluation import *
# from pyspark.ml.feature import *
# from pyspark.ml.tuning import *
from pyspark.sql import SparkSession
# from pyspark.sql.functions import *
# from pyspark.sql.types import *



reload(sys)
sys.setdefaultencoding('utf8')

# Global utilities functions definitions
strip_accents = functions.udf(
    lambda text: ''.join(c for c in unicodedata.normalize('NFD', text)
                         if unicodedata.category(c) != 'Mn'),
    types.StringType())
strip_punctuation = functions.udf(lambda text:
                                  text.translate(
                                      dict((ord(char), None)
                                           for char in string.punctuation)),
                                  types.StringType())

def juicer_debug(name, variable, data_frame):
    """ Debug code """
    print '#' * 20
    print '|| {} ||'.format(name)
    print '== {} =='.format(variable)
    data_frame.show()
    schema = data_frame.schema
    for attr in schema:
        print attr.name, attr.dataType, attr.nullable, attr.metadata
{% autopep8 %}
{%- for instance in instances %}
{%- if instance.has_code %}
def {{instance.parameters.task.operation.slug.replace('-', '_')}}_gen_{{instance.get_output_names('_')}}(spark_session
        {%- if instance.get_inputs_names %}, {{instance.get_inputs_names}}{% endif %}):
    {%- if instance.parameters.task.forms.comment and instance.parameters.task.forms.comment.value.strip()%}
    """
    {{instance.parameters.task.forms.comment.value.replace('"', '')}}
    """
    {%- else %}
    """ Operation {{instance.parameters.task.id }} """
    {%- endif %}
    start = timer()
    {{instance.generate_code().strip() | indent(width=4, indentfirst=False)}}
    {%- if instance.parameters.get('logging', {}).get('log_level') == 'DEBUG' %}
    {%- set out = instance.get_data_out_names('|') %}
    {%- if out %}
    {%- for variable in out.split('|')%}
    juicer_debug('{{instance.__class__}}', '{{variable}}', {{variable}})
    {%- endfor %}
    {%- endif %}
    {%- endif %}

    time_elapsed = timer() - start
    return {% if instance.get_output_names() %} {{instance.get_output_names()}}, {% endif %}time_elapsed

{%- endif %}
{% endfor %}

def main():
    """ Run generated code """
    start = time.time()
    app_name = u'## {{workflow_name}} ##'

    spark_options = {
        "driver-library-path": '{}/lib/native/'.format(
            os.environ.get('HADOOP_HOME')),

    }
    builder = SparkSession.builder.appName(app_name)

    spark_session = builder.getOrCreate()
    for option, value in spark_options.iteritems():
        spark_session.conf.set(option, value)

    session_start_time = time.time()
    # spark_session.sparkContext.addPyFile('/tmp/dist.zip')

    # Declares and initializes variables in order to do not generate NameError.
    # Some tasks may not generate code, but at least one of their outputs is
    # connected to a valid input in a task generating code. This happens when
    # task has a port with multiplicity MANY
    {%- for instance in instances %}
    {%- if instance.has_code %}
    {%- if instance.multiple_inputs %}
    {{instance.get_inputs_names.replace(',', '=') }} = None
    {% endif %}
    {%- endif %}
    {%- endfor %}

    {%- for instance in instances %}
    {%- set is_satisfied = dependency_controller.is_satisfied(instance.parameters.task.id) %}
    {%- if instance.has_code and is_satisfied %}
    {%- set s = dependency_controller.satisfied(instance.parameters.task.id) %}
    {%- if is_satisfied %}
    {% if instance.get_output_names(", ") %}{{instance.get_output_names(", ")}}, {% endif %}ts_{{instance.output}} = {{instance.parameters.task.operation.slug.replace('-', '_')}}_gen_{{instance.get_output_names('_')}}(spark_session
        {%- if instance.get_inputs_names %}, {{instance.get_inputs_names}}{% endif %})
    {%- endif %}
    {%- else %}
    # Task **{{instance.parameters.task.operation.name}}** did not genarate code
    {%- endif %}
    {%- endfor %}

    end = time.time()
    print "{}\t{}".format(end - start, end - session_start_time)
    return {
        'status': 'OK',
        'message': 'Execution defined',
        {%- for instance in instances %}
         {%- set is_satisfied = dependency_controller.is_satisfied(instance.parameters.task.id) %}
         {%- if instance.has_code and is_satisfied %}
        '{{instance.parameters.task.id}}': ({%- if instance.get_output_names() %}
        {%- for variable in instance.get_output_names(', ').split('|') -%}
        {{variable}}, {%- endfor -%}{% endif -%}
        ts_{{instance.output}}),
        {%- endif %}
        {%- endfor %}
    }
{%- if execute_main %}
main()
{%- endif %}
{% endautopep8 %}